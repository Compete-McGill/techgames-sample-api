openapi: "3.0.2"
info:
  version: 0.0.0
  title: WISP Users
  license:
    name: MIT
paths:
  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: An array of users
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Users"
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - users
      responses:
        '201':
          description: Returns the created user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/User"
        '409':
          description: User already exists with given email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /users/{userId}:
    get:
      summary: Info for a specific user
      operationId: showUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: Requested user not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - username
      properties:
        id:
          type: string
        email:
          type: string
        username:
          type: string
        role:
          type: string
          example: "admin | user"
        info:
          type: object
          properties:
            major:
              type: string
            year:
              type: string
            school:
              type: string
            bio:
              type: string
            profilePhoto:
              type: string
              example: link to S3 bucket
        createdAt:
          type: string
        updatedAt:
          type: string
        problems:
          type: array
          items:
            $ref: "#/components/schemas/Problem"
              
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Problem:
      type: object
      properties:
        problemId:
          type: string
        isComplete:
          type: boolean
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
