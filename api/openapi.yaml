openapi: "3.0.2"
info:
  version: 0.0.0
  title: Sample API Tech Games
  license:
    name: MIT
paths:
  /api/articles:
    get:
      summary: List all articles
      operationId: listArticles
      tags:
        - articles
      responses:
        '200':
          description: An array of articles
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Articles"
    post:
      summary: Create an article
      operationId: createArticle
      tags:
        - articles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '201':
          description: Returns success and id
          content:
            application/json:    
              schema:
                type: object
                properties: 
                  message:
                    type: string
                  id:
                    type: string
                
  /api/articles/{articleId}:
    get:
      summary: Info for a specific article
      operationId: showArticleById
      tags:
        - articles
      parameters:
        - name: articleId
          in: path
          required: true
          description: The id of the article to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"
                
    delete:
      summary: Delete a specific article
      operationId: deleteArticle
      tags:
        - articles
      parameters:
        - name: articleId
          in: path
          required: true
          description: The id of the article to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Article succesfully deleted." 
    put:
      summary: Update a specific article
      operationId: updateArticle
      tags:
        - articles
      parameters:
        - name: articleId
          in: path
          required: true
          description: The id of the article to retrieve
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'

      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Success" 
        
components:
  schemas:
    Article:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        title:
          type: string
        subtitle:
          type: string
        leadParagraph:
          type: string
        imageUrl:
          type: string
        body:
          type: string
        author:
          type: string
        userId:
          type: string
        date:
          type: string
        category:
          type: string
    Articles:
      type: array
      items:
        $ref: "#/components/schemas/Article"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
